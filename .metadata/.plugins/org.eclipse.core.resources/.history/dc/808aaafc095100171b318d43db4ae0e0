package bvsm.questions;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Random;

import bvsm.database.Database;
import bvsm.panel.tools.ComboBoxManager;

public class QuestionsEngine extends Questions {

	public QuestionsEngine(ComboBoxManager cbm, Database db) {
		super(cbm, db);
	}

	private static String[][][] questionsArray;
	private static String[][] choosenArray;
	private static boolean[][] questionsBool;
	private static boolean[] choosenBool;
	public int rightQuestion[];
	public int selectedQuestion[];

	public int questionsSize = 0;
	public int atualQuestion = 0;
	int topicSize;
	public int note = 0;
	
	Random random;

	public void start(int questionsSize) {
		this.questionsSize = questionsSize + 1;
		try {
			initialise();
			chooseQuestions();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	private void initialise() {
		try {
			int temp = 0;
			if (cbm.type == "Várias") {
				topicSize = (cbm.subsubTopic[cbm.indexPress][cbm.indexLast].length) - 1;
				questionsArray = new String[topicSize][200][4];

				for (int i = 0; i < topicSize; i++) {
					ResultSet res = getQuestions(getTheme(), i);
					while (res.next()) {

						questionsArray[i][temp][0] = res.getString(2);
						questionsArray[i][temp][1] = res.getString(3);
						questionsArray[i][temp][2] = res.getString(4);
						questionsArray[i][temp][3] = res.getString(5);
						
						temp++;
						
					}
					temp = 0;
				}
			} else {
				questionsArray = new String[1][200][4];
				ResultSet res = getQuestions(getTheme(), cbm.b3);
				while (res.next()) {
					questionsArray[0][temp][0] = res.getString(2);
					questionsArray[0][temp][1] = res.getString(3);
					questionsArray[0][temp][2] = res.getString(4);
					questionsArray[0][temp][3] = res.getString(5);
					
					temp++;
				}
			}
			temp = 0;

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	private void chooseQuestions() throws SQLException {
		choosenArray = new String[questionsSize + 1][4];
		choosenBool = new boolean[200];
		questionsBool = new boolean[topicSize][200];
		random = new Random();
		int size = 1;
		if (cbm.type == "Várias") {
			int qpt = questionsSize / topicSize;
			for (int x = 0; x < topicSize; x++) {
				for (int y = 0; y < qpt; y++) {
					int r = random.nextInt(db.getTableSize(getTheme(), x));
					while(questionsBool[x][r]){
						r = random.nextInt(db.getTableSize(getTheme(), x));
					}
					choosenArray[size][0] = questionsArray[x][r][0];
					choosenArray[size][1] = questionsArray[x][r][1];
					choosenArray[size][2] = questionsArray[x][r][2];
					choosenArray[size][3] = questionsArray[x][r][3];
					questionsBool[x][r] = true;

					size++;
				}
			}
		} else {
			
			random = new Random();

			for(int i = 1; i < questionsSize; i++){
				int r = random.nextInt(db.getTableSize(getTheme(), cbm.b3));
				while(choosenBool[r]){
					r = random.nextInt(db.getTableSize(getTheme(), cbm.b3));
				}
				choosenArray[i][0] = questionsArray[0][r][0];
				choosenArray[i][1] = questionsArray[0][r][1];
				choosenArray[i][2] = questionsArray[0][r][2];
				choosenArray[i][3] = questionsArray[0][r][3];

				choosenBool[r] = true;
			}	
		}
		organize();
	}
	
	public void organize(){
		random = new Random();
		rightQuestion = new int[questionsSize];
		for(int i = 1; i < questionsSize; i++){
			int rq = random.nextInt(3);
			rq += 1;
			rightQuestion[i] = rq;
			String temp = choosenArray[i][rq];
			choosenArray[i][rq] = choosenArray[i][1];
			choosenArray[i][1] = temp;
		}
		selectedQuestion = new int[questionsSize];
	}
	
	public void finalize(){
		int perc = questionsSize / 20;
		for(int i = 1; i < questionsSize; i++){
			if(selectedQuestion[i] == rightQuestion[i]){
				note += perc;
			}
			System.out.println("Selected = " + selectedQuestion[i] + "right = " + rightQuestion[i]);

		}
		System.out.println(note);
	}
	
	public void setSelected(int selected){
		selectedQuestion[atualQuestion] = selected - 1;
	}
	
	public String[] getQuestions(boolean status){
		if(atualQuestion < questionsSize - 1 && status){
			atualQuestion++;

		}
		else if(atualQuestion > 1 && !status){
			atualQuestion--;
		}
		return choosenArray[atualQuestion];
	}
}
